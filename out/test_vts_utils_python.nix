{ python_library_host }:
let

#  Copyright 2017 Google Inc. All rights reserved.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

vts_runner_utils_python = python_library_host {
    name = "vts_runner_utils_python";
    srcs = [
        "__init__.py"
        "android/__init__.py"
        "android/api.py"
        "archive/__init__.py"
        "archive/archive_parser.py"
        "archive/archive_parser_test.py"
        "build/__init__.py"
        "build/api/__init__.py"
        "build/api/artifact_fetcher.py"
        "common/__init__.py"
        "common/cmd_result.py"
        "common/cmd_result_test.py"
        "common/cmd_utils.py"
        "common/filter_utils.py"
        "common/list_utils.py"
        "common/timeout_utils.py"
        "common/timeout_utils_test.py"
        "common/vts_spec_utils.py"
        "controllers/__init__.py"
        "controllers/adb.py"
        "controllers/android.py"
        "controllers/android_device.py"
        "controllers/android_device_test.py"
        "controllers/fastboot.py"
        "coverage/__init__.py"
        "coverage/arc_summary.py"
        "coverage/arc_summary_test.py"
        "coverage/block_summary.py"
        "coverage/coverage_report.py"
        "coverage/coverage_report_test.py"
        "coverage/coverage_utils.py"
        "coverage/file_summary.py"
        "coverage/function_summary.py"
        "coverage/function_summary_test.py"
        "coverage/gcda_parser.py"
        "coverage/gcda_parser_test.py"
        "coverage/gcno_parser.py"
        "coverage/gcno_parser_test.py"
        "coverage/parser.py"
        "coverage/parser_test.py"
        "coverage/sancov_parser.py"
        "coverage/sancov_parser_test.py"
        "coverage/sancov_utils.py"
        "cpu/__init__.py"
        "cpu/cpu_frequency_scaling.py"
        "file/__init__.py"
        "file/target_file_utils.py"
        "fuzzer/FuzzerUtils.py"
        "fuzzer/GenePool.py"
        "fuzzer/__init__.py"
        "fuzzer/corpus_manager.py"
        "fuzzer/corpus_manager_test.py"
        "gcs/__init__.py"
        "gcs/gcs_api_utils.py"
        "gcs/gcs_api_utils_test.py"
        "gcs/gcs_utils.py"
        "gcs/gcs_utils_test.py"
        "hal/__init__.py"
        "hal/hal_service_name_utils.py"
        "hal/hal_service_name_utils_unittest.py"
        "instrumentation/__init__.py"
        "instrumentation/test_framework_instrumentation.py"
        "instrumentation/test_framework_instrumentation_categories.py"
        "instrumentation/test_framework_instrumentation_event.py"
        "instrumentation/test_framework_instrumentation_test.py"
        "instrumentation/test_framework_instrumentation_test_submodule.py"
        "io/__init__.py"
        "io/capture_printout.py"
        "io/file_util.py"
        "io/file_util_test.py"
        "library/__init__.py"
        "library/ar_parser.py"
        "library/elf_parser.py"
        "library/elf_parser_test.py"
        "library/elf/__init__.py"
        "library/elf/consts.py"
        "library/elf/structs.py"
        "library/elf/utils.py"
        "library/elf/utils_test.py"
        "library/vtable/__init__.py"
        "library/vtable/vtable_dumper.py"
        "library/vtable/vtable_dumper_test.py"
        "mirror/__init__.py"
        "mirror/hal_mirror.py"
        "mirror/lib_mirror.py"
        "mirror/mirror_object.py"
        "mirror/mirror_tracker.py"
        "mirror/native_entity_mirror.py"
        "mirror/pb2py.py"
        "mirror/py2pb.py"
        "mirror/resource_mirror.py"
        "mirror/shell_mirror.py"
        "os/__init__.py"
        "os/env_utils.py"
        "os/path_utils.py"
        "performance/__init__.py"
        "performance/benchmark_parser.py"
        "precondition/__init__.py"
        "precondition/precondition_utils.py"
        "profiling/__init__.py"
        "profiling/profiling_utils.py"
        "reporting/__init__.py"
        "reporting/log_uploading_utils.py"
        "reporting/report_file_utils.py"
        "reporting/report_file_utils_test.py"
        "systrace/__init__.py"
        "systrace/systrace_controller.py"
        "systrace/systrace_utils.py"
        "vndk/__init__.py"
        "vndk/vndk_utils.py"
        "web/__init__.py"
        "web/dashboard_rest_client.py"
        "web/feature_utils.py"
        "web/web_utils.py"
    ];
    defaults = ["py2_only"];
};

in { inherit vts_runner_utils_python; }
