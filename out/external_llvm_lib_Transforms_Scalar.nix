{ cc_library_static }:
let

libLLVMScalarOpts = cc_library_static {
    name = "libLLVMScalarOpts";
    defaults = [
        "llvm-lib-defaults"
    ];
    srcs = [
        "ADCE.cpp"
        "AlignmentFromAssumptions.cpp"
        "BDCE.cpp"
        "ConstantHoisting.cpp"
        "ConstantProp.cpp"
        "CorrelatedValuePropagation.cpp"
        "DCE.cpp"
        "DeadStoreElimination.cpp"
        "EarlyCSE.cpp"
        "FlattenCFGPass.cpp"
        "Float2Int.cpp"
        "GVN.cpp"
        "GuardWidening.cpp"
        "IndVarSimplify.cpp"
        "InductiveRangeCheckElimination.cpp"
        "JumpThreading.cpp"
        "LICM.cpp"
        "LoadCombine.cpp"
        "LoopDataPrefetch.cpp"
        "LoopDeletion.cpp"
        "LoopDistribute.cpp"
        "LoopIdiomRecognize.cpp"
        "LoopInstSimplify.cpp"
        "LoopInterchange.cpp"
        "LoopLoadElimination.cpp"
        "LoopRerollPass.cpp"
        "LoopRotation.cpp"
        "LoopSimplifyCFG.cpp"
        "LoopStrengthReduce.cpp"
        "LoopUnrollPass.cpp"
        "LoopUnswitch.cpp"
        "LoopVersioningLICM.cpp"
        "LowerAtomic.cpp"
        "LowerExpectIntrinsic.cpp"
        "LowerGuardIntrinsic.cpp"
        "MemCpyOptimizer.cpp"
        "MergedLoadStoreMotion.cpp"
        "NaryReassociate.cpp"
        "PartiallyInlineLibCalls.cpp"
        "PlaceSafepoints.cpp"
        "Reassociate.cpp"
        "Reg2Mem.cpp"
        "RewriteStatepointsForGC.cpp"
        "SCCP.cpp"
        "SROA.cpp"
        "Scalar.cpp"
        "Scalarizer.cpp"
        "SeparateConstOffsetFromGEP.cpp"
        "SimplifyCFGPass.cpp"
        "Sink.cpp"
        "SpeculativeExecution.cpp"
        "StraightLineStrengthReduce.cpp"
        "StructurizeCFG.cpp"
        "TailRecursionElimination.cpp"
    ];
};

in { inherit libLLVMScalarOpts; }
